package controller;

import java.io.File;
/*import java.io.BufferedInputStream; 	All Never Used
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream; */

//import compression_algorithms.WordDictionary;
//import compression_algorithms.ZippedDir;
import model.Model;
import view.Command;
//import view.ConDirCommand;
import view.UserCommands;
import view.View;
/*import view.UserCommands.DicCommand;
import view.UserCommands.DirCommand;
import view.UserCommands.HuffmanCommpress;
import view.UserCommands.HuffmanDeCommpress;
import view.UserCommands.Size;
import view.UserCommands.UnDicCommand;
import view.UserCommands.UnZipCommand;
import view.UserCommands.ZipCommand;*/

public class Controller {

	Model m;
	View v;
	
	public Controller(Model m, View v) {
		this.m=m;
		this.v=v;
	}
	
	/*public void zipFile(String fileName){	//ELIS
		m.zipfile(fileName);
	}*/
	
	private class ConDirCommand implements Command{
		@Override
		public void doCommand(String path) {
			File file = new File(path);
			if (file.isFile()){
				System.out.println(file);
			}
			else{
				for (File f : file.listFiles()){
					System.out.println(f);
				}
			}
		}
	}
	
	public void display(String s){
		v.display(s);
	}
	
	public void display(File file) {	//New display
		v.display(file);
	}
	
	public void setUserCommands(UserCommands commands){
		commands.put("dir", new ConDirCommand());
		commands.put("zip", new ConZipCommand());
		commands.put("unzip", new ConUnZipCommand());
		commands.put("huf", new ConHuffmanCommpress());
		commands.put("huf",(Command) new ConHuffmanDeCommpress());
		commands.put("dic", new ConDicCommand());
		commands.put("undic", new ConUnDicCommand());
		commands.put("size", new ConSize());
	}
	
	//Copy ===START===
	private class ConZipCommand implements Command{
		@Override
		public void doCommand(String filePath) {
			m.doZipCommand(filePath);
		}
	}
	
	private class ConUnZipCommand implements Command{
			@Override
			public void doCommand(String filePath) {
				m.doUnZipCommand(filePath);
			}		
		}
	
	private class ConHuffmanCommpress implements Command{
		@Override
		public void doCommand(String filePath) {
			//Call for the HuffmanCommpress we made in "my algorithms" in Part A
			m.doHuffmanCommpressCommand(filePath);
		}
	}
	
	private class ConHuffmanDeCommpress implements Command{
		@Override
		public void doCommand(String filePath) {
			//Call for the HuffmanDeCommpress we made in "my algorithms" in Part A
			m.doHuffmanDeCommpressCommand(filePath);
		}
	}
	
	private class ConDicCommand implements Command{
		@Override
		public void doCommand(String fileName) {
			m.doDicCommand(fileName);
		}		
	}
	
	private class ConUnDicCommand implements Command{
		@Override
		public void doCommand(String fileName) {
			m.doUndicCommand(fileName);
		}		
	}
	
	private class ConSize implements Command{

		@Override
		public void doCommand(String path) {
			m.doSizeCommand(path);
		}
	}
	//Copy ===END===


	

}
