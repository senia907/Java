package compression_algorithms;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.stream.Stream;

/**
* Class that extends CommonCompressor(implements Compressor) that used to compress and deCompress data by saving
* the index(s) of the word.
* @author  Senia Kalma
* @since   4/5/2015
*/
public class WordDictionary	extends CommonCompressor {

	@Override
	public OutputStream compress(InputStream in,OutputStream out) {
		String input = null;
		ObjectInputStream mIn = null;
		try {
			mIn = new ObjectInputStream(in);
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			input = (String) mIn.readObject();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		ZippedDir dict = new ZippedDir();
		String[] sp = input.split(" ");
		
		for (int i = 0; i < sp.length; i++)
		{
			String word = sp[i];
			ArrayList<Integer> indices;
			
			if (dict.containsKey(word))
				indices = dict.get(word);
			else
				indices = new ArrayList<Integer>();
			
			indices.add(i);
			dict.put(word, indices);
		}		
		ObjectOutputStream out2 = null;
		try {
			out2 = new ObjectOutputStream(out);
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			out2.writeObject(dict);
		} catch (IOException e) {
			e.printStackTrace();
		}		//Writing the ZippedDir
		
		return out;
	}

	@Override
	public OutputStream deCompress(InputStream in,OutputStream out) throws ClassNotFoundException, IOException {
		ZippedDir input;
		ObjectInputStream mIn = new ObjectInputStream(in);
		input = (ZippedDir) mIn.readObject();
		
		StringBuffer sb = new StringBuffer();
		String fin=null;
		for (String word: input.keySet()){
			for(int i=0;i<input.size();i++){
				ArrayList<Integer> indices = input.get(word);
				for (int index : indices)
				{
					if(index==i){
						System.out.println(word);
						fin+=word;
					}
				}
				sb.deleteCharAt(sb.length() - 1);
				sb.append(" ");
			}
		}
		
		ObjectOutputStream out2 = new ObjectOutputStream(out);
		out2.writeObject(fin);		//Writing the string to the outputStream we got
	    
		return out;
	}

}
