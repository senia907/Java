package view;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

import compression_algorithms.WordDictionary;
import compression_algorithms.ZippedDir;
import algorithms.demo.Demo;

//import algorithms.MyZip;
//import algorithms.ZippedDictionary;

public class UserCommands {
	
	private HashMap<String, Command> commands = 
			new HashMap<String,Command>();
	
	public UserCommands()
	{
		commands.put("dir", new DirCommand());
		commands.put("zip", new ZipCommand());
		commands.put("unzip", new UnZipCommand());
		commands.put("huf", new HuffmanCommpress());
		commands.put("huf", new HuffmanDeCommpress());
		commands.put("dic", new DicCommand());
		commands.put("undic", new UnDicCommand());
		commands.put("size", new Size());
		// add the other commands to the hash map...
	}
	
	public Command selectCommand(String commandName){
		return commands.get(commandName);
	}
	
	private class DirCommand implements Command{

		@Override
		public void doCommand(String path) {
			File file = new File(path);
			
			if (file.isFile()){
				System.out.println(file);
			}
			else{
				for (File f : file.listFiles()){
					System.out.println(f);
				}
			}
		}
	}
	
	private class ZipCommand implements Command{
		@Override
		public void doCommand(String filePath) {
			BufferedInputStream in;
			GZIPOutputStream out;
			try {
				in=new BufferedInputStream(new FileInputStream(filePath));
				byte[] data=new byte[1000];
				out=new GZIPOutputStream(new FileOutputStream(filePath+".zip"));
				while((in.read(data))!=-1){
					out.write(data);
				}
				out.flush();
				out.close();
				in.close();
				System.out.println("Compressing Done");
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO: handle exception
			}
		}
	}
	
	private class UnZipCommand implements Command{
			@Override
			public void doCommand(String filePath) {
				BufferedOutputStream out;
				GZIPInputStream in;
				try {
					out=new BufferedOutputStream(new FileOutputStream(filePath.substring(0, filePath.length()-4)));
					byte[] data=new byte[1000];
					in=new GZIPInputStream(new FileInputStream(filePath));
					while((in.read(data))!=-1){
						out.write(data);
					}
					out.flush();
					out.close();
					in.close();
					System.out.println("DeCompressing Done");
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO: handle exception
				}
			}		
		}
	
	private class HuffmanCommpress implements Command{
		@Override
		public void doCommand(String filePath) {
			//Call for the HuffmanCommpress we made in "my algorithms" in Part A
		}
	}
	
	private class HuffmanDeCommpress implements Command{
		@Override
		public void doCommand(String filePath) {
			//Call for the HuffmanDeCommpress we made in "my algorithms" in Part A
		}
	}
	
	private class DicCommand implements Command{
		@Override
		public void doCommand(String fileName) {			
			try {
				BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(fileName)));
				
				StringBuffer buffer = new StringBuffer();
				String line;
				while ((line = reader.readLine()) != null){
					buffer.append(line);
				}
				
				String str = buffer.toString();
				WordDictionary myZip = new WordDictionary();
				ZippedDir dict;//Stream Problem = myZip.compress(str);
				
				ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(fileName + ".dic"));
				//Stream Problem out.writeObject(dict);
				out.close();
				
				System.out.println("Compression finished");
				
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}			
		}		
	}
	
	private class UnDicCommand implements Command{
		@Override
		public void doCommand(String fileName) {			
			try {
				BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(fileName)));
				
				StringBuffer buffer = new StringBuffer();
				String line;
				while ((line = reader.readLine()) != null){
					buffer.append(line);
				}
				String str = buffer.toString();		//Change to deCompress after part A done.
				WordDictionary myZip = new WordDictionary();
				ZippedDir dict;//Stream Problem = myZip.compress(str);
				
				ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(fileName + ".dic"));
				//Stream Problem out.writeObject(dict);
				out.close();
				
				System.out.println("DeCompression finished");
				
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}			
		}		
	}
	
	private class Size implements Command{

		@Override
		public void doCommand(String path) {
			BufferedInputStream in = null;
			try {
				in = new BufferedInputStream(new FileInputStream(path));
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			int size=0;
					try {
						while((in.read())!=-1){
							size++;
						}
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			System.out.println("File size is: "+size);

		}
	}
	// all other commands...
}
